// Mocks generated by Mockito 5.4.2 from annotations
// in ditonton/test/data/repositories/watchlist_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:core/core.dart' as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:ditonton/data/datasources/watchlist_local_data_source.dart'
    as _i2;
import 'package:ditonton/data/models/watchlist_table.dart' as _i8;
import 'package:ditonton/data/repositories/watchlist_repository_impl.dart'
    as _i4;
import 'package:ditonton/domain/entities/watchlist.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWatchlistLocalDataSource_0 extends _i1.SmartFake
    implements _i2.WatchlistLocalDataSource {
  _FakeWatchlistLocalDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WatchlistRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistRepositoryImpl extends _i1.Mock
    implements _i4.WatchlistRepositoryImpl {
  MockWatchlistRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WatchlistLocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeWatchlistLocalDataSource_0(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i2.WatchlistLocalDataSource);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Watchlist>>> getWatchlist() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWatchlist,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Watchlist>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Watchlist>>(
          this,
          Invocation.method(
            #getWatchlist,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Watchlist>>>);
}

/// A class which mocks [WatchlistLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistLocalDataSource extends _i1.Mock
    implements _i2.WatchlistLocalDataSource {
  MockWatchlistLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.WatchlistTable>> getWatchlist() => (super.noSuchMethod(
        Invocation.method(
          #getWatchlist,
          [],
        ),
        returnValue:
            _i5.Future<List<_i8.WatchlistTable>>.value(<_i8.WatchlistTable>[]),
      ) as _i5.Future<List<_i8.WatchlistTable>>);
}
